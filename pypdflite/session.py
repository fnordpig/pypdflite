from pdfobjects.pdfobject import _PDFObject


class _Session(object):
    """ Manages the storing of the
        text output for the PDF objects
        as they are generated by the pdfobject
        classes. Has a centralized count of the
        objects, and some helper functions (putStream,
        compression, etc.)

        One and only one session object should be
        instantiated per PDF file. The object should be
        passed by-reference to objects that will need
        to generate output (either PDF objects or to streams).

    """
    def __init__(self, parent):
        self.parent = parent

        # Central buffer for storing PDF code not in pages.
        self.buffer = ''

        # Offest is used to calculate the binary lengths in the cross-reference section
        self.offset = 0

        self.objects = []

        # Creates the placeholders in the object list to maintain proper count.
        self._createPlaceholderObjects()
        self.compression = False

    def _createPlaceholderObjects(self):
        """ PDF objects #1 through #3 are typically saved for the
            Zeroth, Catalog, and Pages Objects. This program will save
            the numbers, but outputs the individual Page and Content objects
            first. The actual Catalog and Pages objects are calculated after.

        """
        self.objects.append("Zeroth")
        self.objects.append("Catalog")
        self.objects.append("Pages")

    def _setCompression(self, value):
        """ May be used to compress PDF files. Code is more readable
            for testing and inspection if not compressed. Requires a
            boolean.

        """
        if isinstance(value, bool):
            self.compression = value
        else:
            raise Exception(TypeError, "%s is not a valid option for compression" % value)

    def _out(self, s, page=None):
        """ Stores the pdf code in a buffer. If it is page related,
            provide the page object.

        """
        if page is not None:
            page.buffer += str(s) + "\n"
        else:
            self.buffer += str(s) + "\n"

    def _putStream(self, s):
        """ Creates a PDF text stream sandwich.

        """
        self._out('stream')
        self._out(s)
        self._out('endstream')

    def _addObject(self, flag=None):
        """ The flag is a simple integer to force the placement
            of the object into position in the object array.
            Used for overwriting the placeholder objects.

        """
        self.offset = self.offset + len(self.buffer)
        if flag is None:
            objnum = len(self.objects)
            obj = _PDFObject(objnum, self.offset)
            self.objects.append(obj)
        else:
            objnum = flag
            obj = _PDFObject(objnum, self.offset)
            self.objects[flag] = obj
        self._out(str(objnum) + ' 0 obj')
        return obj

    def _addPage(self, text):
        """ Helper function for PDFText, to have the document
            add a page, and retry adding a large block of
            text that would otherwise have been to long for the
            page.

        """
        self.parent.document.addPage()
        self.parent.document.addText(text)
